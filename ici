#!/bin/sh

# Copyright (C) 2012-2014 Simon Josefsson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Most of the structure of this package was borrowed from 
# https://gitorious.org/cosmos/ so I kept the copyright

set -e
self=`basename $0`

ICI_CMD=$0
export ICI_CMD

usage ()
{
    echo "\
Usage: ici [OPTION...] CA COMMAND [COMMAND-OPTION...]

ici is a stupidly simple certifiction authority

The COMMAND specify the action sequence performed by the tool.

Mandatory arguments to long options are mandatory for short options too.

  -v, --verbose             explain what is being done
  -h, --help                show this help text and exit
  -V, --version             show version information and exit

The environment variable ICI_CONF_DIR may specify a path to the
configuration directory where the file ici.conf is read before
command line parameters are parsed.  The file is sourced as a shell
script.  If ICI_CONF_DIR is not set, the path /etc/ici is used.

" 1>&2
}

ICI_OPENSSL=openssl
export ICI_OPENSSL
ICI_PKCS11_TOOL=pkcs11-tool
export ICI_PKCS11_TOOL

# Read configuration file.
{
    if test -z "${ICI_CONF_DIR}"; then
        ICI_CONF_DIR="/etc/ici"
    fi
    ICI_CONF="${ICI_CONF_DIR}/ici.conf"
    export ICI_CONF_DIR ICI_LIB_DIR ICI_CONF

    if test -e "$ICI_CONF"; then
	set -a
	. "$ICI_CONF"
	set +a
    fi

    if test -z "${ICI_CA_ROOT}"; then
        ICI_CA_ROOT="/var/lib/ici"
    fi
}

# Command line parsing.
{
    while test $# -gt 0; do
	case "$1" in
	    --verbose | -v)
		ICI_VERBOSE=y
		shift ;;
	    --help | -h )
		usage
		exit 0 ;;
	    --version | -V )
		version
		exit 0 ;;
	    -- )
        # Stop option processing
		shift
		break ;;
	    -* )
		echo "$self: unknown option $1" 1>&2
		echo "Try 'ici --help' for more information." 1>&2
		exit 1 ;;
	    * )
		break ;;
	esac
    done

    if test $# -eq 0; then
	usage
	exit 0
    fi

    export ICI_VERBOSE
}

ca="$1"
shift

cmd="$1"
shift

dir="${ICI_LIB_DIR}/$cmd.d"

if ! test -d "$dir"; then
    echo "$self: unknown command '$cmd'" 1>&2
    echo "Try 'ici --help' for more information." 1>&2
    exit 1
fi

_trap ()
{
   err=$?
   if [ $err -ne 0 ]; then
      echo "--- cfg ---"
      cat $1
      echo "--- out ---"
      cat $2 
   fi
   unlink $1
   unlink $2
   exit $err
}

cfg=`mktemp`
log=`mktemp`
trap '_trap $cfg $log' EXIT

parts=$(echo `find $dir/ -mindepth 1 -maxdepth 1 \
    -type f -o -type l -executable -name '[0-9]*' \! -name \*~ | sort`)

if test -z "$parts"; then
    echo "$self: nothing to do?!" 1>&2
    exit 1
fi

ICI_CA="$ca"
ICI_CA_DIR="${ICI_CA_ROOT}/$ICI_CA"
ICI_CONFIG="$cfg"
ICI_CMD="$cmd"

export ICI_CA ICI_CA_DIR ICI_CONFIG ICI_CMD

. $ICI_LIB_DIR/lib/config.sh
if [ -f $ICI_CA_DIR/ca.config ]; then
   . $ICI_CA_DIR/ca.config
fi
. $ICI_LIB_DIR/lib/args.sh

for part in $parts; do
    "$part" "$@"
done

exit 0
